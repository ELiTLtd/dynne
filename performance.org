* Experiments
** Baseline
#+begin_src clojure
  (let [max-t (double (* 44100 1.0))
        inc-t (double (/ 1.0 44100))]
    (time (loop [t 0.0]
            (when (< t max-t)
              (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 5100.59828 msecs"

Holy crap!

Only wait, this is for 44100 seconds of audio, not one second like I thought.

** Type hints
#+begin_src clojure
  (let [^double max-t (double (* 44100 1.0))
        ^double inc-t (double (/ 1.0 44100))]
    (time (loop [t 0.0]
            (when (< t max-t)
              (recur (+ t inc-t))))))
#+end_src

Fails because you can't primitive-hint locals like that. The
`(double)` declaration ought to be enough to get it to use primitive
math. So WTF is it so slow?

** Using doseq instead
#+begin_src clojure
  (let [max-t (double (* 44100 1.0))
        inc-t (double (/ 1.0 44100))]
    (time (doseq [t (range 0 max-t inc-t)])))
#+end_src

"Elapsed time: 55371.522445 msecs"

Yaa!

Only wait, this is for 44100 seconds of audio, not one second like I thought.

** Debugger?

Hmm. I have the debugging enabled in my project. Wonder if that
matters? Turning it off and doing this again:

#+begin_src clojure
  (let [max-t (double (* 44100 1.0))
        inc-t (double (/ 1.0 44100))]
    (time (loop [t 0.0]
            (when (< t max-t)
              (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 5087.389305 msecs"

Nope.

** Without the double casts?

#+begin_src clojure
  (let [max-t (* 44100 1.0)
        inc-t (/ 1.0 44100)]
    (time (loop [t 0.0]
            (when (< t max-t)
              (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 5101.189955 msecs"


** With a literal zero for the initial value of t

#+begin_src clojure
  (let [max-t (* 44100 1.0)
        inc-t (/ 1.0 44100)]
    (time (loop [t 0]
            (when (< t max-t)
              (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 7947.990526 msecs"

** With an long zero for the initial value of t

#+begin_src clojure
  (let [max-t (* 44100 1.0)
        inc-t (/ 1.0 44100)]
    (time (loop [t (long 0)]
            (when (< t max-t)
              (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 7411.203103 msecs"


** With an int zero for the initial value of t and a cast on max-t

#+begin_src clojure
  (let [max-t (double (* 44100 1.0))
        inc-t (/ 1.0 44100)]
    (time (loop [t (int 0)]
            (when (< t max-t)
              (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 7299.571628 msecs"

** Same thing, but with the profiler killed and the repl restarted

#+begin_src clojure
  (let [max-t (double (* 44100 1.0))
        inc-t (/ 1.0 44100)]
    (time (loop [t (int 0)]
            (when (< t max-t)
              (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 7406.9407 msecs"

** With only literal values

#+begin_src clojure
  (time
   (loop [t 0]
     (when (< t 1.0)
       (recur (+ t 2.2675736961451248E-5)))))
#+end_src

"Elapsed time: 3.055637 msecs"

** With division in the loop

#+begin_src clojure
  (time
   (loop [t 0]
     (when (< t 1.0)
       (recur (+ t (/ 1.0 44100))))))
#+end_src

"Elapsed time: 4.770925 msecs"

** With division by a local in the loop

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)]
    (time
     (loop [t 0]
       (when (< t 1.0)
         (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 3.64431 msecs"

** With comparison to local in the loop

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 1.0]
    (time
     (loop [t 0]
       (when (< t max-t)
         (recur (+ t inc-t))))))
#+end_src

"Elapsed time: 4.422404 msecs"

** One hour of raw iteration via loop

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 3600.0]
    (time
     (loop [t 0]
       (when (< t max-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 585.542234 msecs"
: ;;=> nil

** One hour of Math/sin via loop

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 3600.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (Math/sin t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 5834.65337 msecs"
: ;;=> nil

** One minute of sampling null sound

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (null-sound)]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 48229.334598 msecs"
: ;;=> nil


** One minute of sampling silence

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (silence 60)]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 153.666386 msecs"
: ;;=> nil

Wow - that's much faster than the null sound. Something in `sample`
must be slow. I suspect the call to vec. Let's try taking that out.

** One minute of sampling null sound without vec

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (null-sound)]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 50320.388388 msecs"
: ;;=> nil

Even slower without the vec! Maybe we should try to make generating
the zero-samples faster.

** One minute of sampling null sound with memoized zeros

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (null-sound)]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 51290.347651 msecs"
: ;;=> nil

Still slow! Maybe it's calling channels that's slow, not the zeros.
Let's try memoizing based on the sound, too.


** One minute of sampling null sound with memoized zeros based on sound

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (null-sound)]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 561.872713 msecs"
: ;;=> nil

Wow - much, much better. OK, so channels is probably slow. Why?

** Baseline performance of 1M loop

#+begin_src clojure
  (let [n 1000000]
    (time
     (loop [n n]
       (when (pos? n)
         (recur (dec n))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 11.673236 msecs"
: ;;=> nil


** Baseline performance of calling current impl of channels 1M times

#+begin_src clojure
  (let [n 1000000
        s (linear 1.0 1 0)]
    (time
     (loop [n n]
       (when (pos? n)
         (channels s)
         (recur (dec n))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 19183.636877 msecs"
: ;;=> nil

So, yes: slow

** Is satisfies? slow?

#+begin_src clojure
  (let [n 1000000
        s (null-sound)]
    (time
     (loop [n n]
       (when (pos? n)
         (satisfies? impl/Sound s)
         (recur (dec n))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 60.466917 msecs"
: ;;=> nil

Nope.

** OK, so is the new version of channels that reifies ChannelCount still slow?

#+begin_src clojure
  (let [n 1000000
        s (linear 1.0 1 0)]
    (time
     (loop [n n]
       (when (pos? n)
         (channels s)
         (recur (dec n))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 42.306549 msecs"
: ;;=> nil

Hah. No.

** OK, so now is sampling the null sound slow?

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (null-sound)]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 560.709172 msecs"
: ;;=> nil

Much faster!

** How is it to iterate over one minute of a WAV file?

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (read-sound "sin.wav")]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 1704.228193 msecs"
: ;;=> nil

Huh! Not bad. Let's whip out a profiler and see what's slow. Signs
point to it being vec inside of read-sound's reification of
amplitudes.

** After removing the call to vec

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (read-sound "sin.wav")]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 969.256816 msecs"
: ;;=> nil

Quite a bit better. And over 60x realtime. I call that a victory.
Still, the profiler says that we're spending a lot of time in
`second`. Let's see if replacing that with nth is any better.

** After removing the call to second by not using destructuring

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (read-sound "sin.wav")]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 987.94372 msecs"
: ;;=> nil

Hmm. Not much change. But I found other places where we're calling
first and second

** After removing calls to first and second

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (read-sound "sin.wav")]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 493.927132 msecs"
: ;;=> nil

Wow! Much better again! Up to 120x realtime.

Now the profiler says it's get. So let's see if we can refactor that
out of there.

** After removing calls to get

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (read-sound "sin.wav")]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 420.32895 msecs"
: ;;=> nil

A little better. I think we might be at the point of diminishing
returns. Profiler says the dominating factor is now self-time in
sample. Which I'm not sure how to optimize any further easily. Let's
move on.

** Using an array rather than repeatedly in read-sound

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        max-t 60.0
        s (read-sound "sin.wav")]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 493.028059 msecs"
: ;;=> nil

Slightly worse, but the other way was actually broken due to some
laziness issue I never figured out. Let's call this good for now.

** 4x oversampling of one minute of a file

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample s t 4 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 10794.655395 msecs"
: ;;=> nil

Wow. Slow, slow, slow. Profiler says it's probably seq-related, since
oversample does a whole bunch of sequence processing. Seems like a
good time to try reducers out...

** With map instead of mapv in oversample

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample s t 4 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 9642.868507 msecs"
: ;;=> nil

Which is only slightly better. We need something else.

** With loops instead of mapping

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample s t 4 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 3607.20579 msecs"
: ;;=> nil

Much better. The profiler tells us that nth is the culprit. Maybe we
can get rid of that.

** With a doseq instead of nth

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample s t 4 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 2788.704404 msecs"
: ;;=> nil

At this point, I'm not sure I can do much better without restructuring
the way the code works.

** After the refactoring to explicit channel numbers in sample

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 549.15241 msecs"
: ;;=> nil

** After removing type hints on sample and optimizing <=

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 367.410641 msecs"
: ;;=> nil

Which is pretty good. At this point we think the performance is gated
by the boxing that's going on because we're using a protocol. Next
step: use an interface instead.


** After refactoring to a Java interface rather than a protocol

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 310.098432 msecs"
: ;;=> nil

No faster. Hmm.

** After putting type hints on the read-sound reify

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 365.450692 msecs"
: ;;=> nil

Now, how does that compare to a not-file sound?

** Sampling of silence

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (silence 60.0)
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (sample s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 111.675037 msecs"
: ;;=> nil

OK, so that's sort of the theoretical minimum. What about
oversampling?

** Oversampling of silence

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (silence 60.0)
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 416.993825 msecs"
: ;;=> nil

And how does that compare to a file sound?

** Oversampling of file-based sound

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 1285.307141 msecs"
: ;;=> nil

Interesting. What about that is slow, exactly?

** Calling into .amplitude directly on a file-based sound

#+begin_src clojure
  (let [inc-t (/ 1.0 44100 4.0)
        delta-t (/ inc-t 4)
        s ^dynne.sound.impl.ISound (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (.amplitude s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 1047.882601 msecs"
: ;;=> nil

OK. And I just noticed that there are reflection and performance
warnings. Let's fix those.

** Oversampling silence after fixing some performance warnings

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (silence 60.0)
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 284.798317 msecs"
: ;;=> nil

Much better! Was about 480 msecs before.

** Oversampling file-based sound after fixing some performance warnings

Previous results: 1200 ms

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 1240.700827 msecs"
: ;;=> nil

So not really any better. But that has to mostly be in the file stuff,
because sampling silence is substantially faster.

** Calling into .amplitude directly on a file-based sound again

#+begin_src clojure
  (let [inc-t (/ 1.0 44100 4.0)
        delta-t (/ inc-t 4)
        s ^dynne.sound.impl.ISound (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (.amplitude s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 1147.476743 msecs"
: ;;=> nil

Yep. So most of the time we're spending in oversample is actually
calling into .amplitude. The profiler says that most of our time is in
self-time of the above function, which doesn't seem likely, since if I
comment out the call to .amplitude, it's only 30msec. But other than
that, it complains that "clojure.lang.Numbers.lt" is the next-biggest
thing!

** Calling into .amplitude directly on a file-based sound again, but with casting to try to get lt to be faster

#+begin_src clojure
  (let [inc-t (/ 1.0 44100 4.0)
        delta-t (/ inc-t 4)
        s ^dynne.sound.impl.ISound (read-sound "sin-long.wav")
        max-t 3600.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (.amplitude s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 60768.833847 msecs"
: ;;=> nil

** Calling .amplitude directly after moving away from atoms to a custom, mutable thingy

#+begin_src clojure
  (let [inc-t (/ 1.0 44100 4.0)
        delta-t (/ inc-t 4)
        s ^dynne.sound.impl.ISound (read-sound "sin-long.wav")
        max-t 3600.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (.amplitude s t 0)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 44943.919476 msecs"
: ;;=> nil

That's actually a fair improvement. Profiler says nothing useful at
this point. Might need to try YourKit to see if it's any better.
Still: good progress. Let's see what oversampling looks like.

** Oversampling file-based sound after moving away from atoms

Previous results:

#+RESULTS:
: ;; "Elapsed time: 1240.700827 msecs"
: ;;=> nil

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 819.078953 msecs"
: ;;=> nil

Yep: much better. Going to call it a day and commit this.


* Utility blocks
** oversample a whole sound file

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t (duration s)]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         ;;(sample s t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 8319.353929 msecs"
: ;;=> nil


* Experiments, round 2

** Repeat oversampling file-based sound after moving away from atoms

Previous results:

#+RESULTS:
: ;; "Elapsed time: 819.078953 msecs"
: ;;=> nil

At commit 96de01a

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 3317.199901 msecs"
: ;;=> nil

Wow - much slower. Let's try again with an older commit.

** Trying against with commit 94efc1d

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 3284.966559 msecs"
: ;;=> nil

Still really slow. WTF?!

** Trying again with commit b134fd981895e5c5f169c18de52108a4bae0faf9

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 3281.916644 msecs"
: ;;=> nil

Do not understand...

** Against a sinusoid with commit b134fd981895e5c5f169c18de52108a4bae0faf9

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (sinusoid 600 440)
        max-t 600.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 18541.165752 msecs"
: ;;=> nil

Wow. That should not be anywhere near that slow...how was it as fast
as it was before?

The weird thing is, the profiler is reporting that ll the time is in
the benchmarking code, not in the dynne code itself. Maybe I should
try this on a different OS.


** Again with 10a0cc1a967f76f7f889ac1ce3e503fe7139ef1f, on Ubuntu

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (sinusoid 600 440)
        max-t 600.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:

None, because it ran so long I killed it. Going to reboot and see if
that helps.

** Again with 10a0cc1a967f76f7f889ac1ce3e503fe7139ef1f, on Windows after a reboot

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (sinusoid 600 440)
        max-t 1.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 2949.670842 msecs"
: ;;=> nil

Holy crap, we're actually slower than real-time. Profiler time!

** Again with 10a0cc1a967f76f7f889ac1ce3e503fe7139ef1f, on Windows after a reboot

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (sinusoid 600 440)
        max-t 1.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 2949.670842 msecs"
: ;;=> nil

Still slower than real-time

** Again with 10a0cc1a967f76f7f889ac1ce3e503fe7139ef1f, disabling debugging

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (sinusoid 600 440)
        max-t 10.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 27786.238717 msecs"
: ;;=> nil

Still incredibly slow. Profiler says it's
java.lang.reflect.getParameterTypes, followed by
java.lang.Class.forName, seemingly from within sample. Hmm.


** After adding more type hints to sample, oversample4, and a few other things

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (sinusoid 600 440)
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 1278.849554 msecs"
: ;;=> nil

Wah! That certainly helped.

** Now back to the previous examples

Previous results:
"Elapsed time: 819.078953 msecs"

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 10.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 19472.126211 msecs"
: ;;=> nil

Back to slower than real time.

** After many, many more type hints and reflection removal

Previous results:
: ;; "Elapsed time: 1278.849554 msecs"

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (sinusoid 600 440)
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 758.755775 msecs"
: ;;=> nil

Wah! That certainly helped.

** Same thing against a file-based sound

#+begin_src clojure
  (let [inc-t (/ 1.0 44100)
        delta-t (/ inc-t 4)
        s (read-sound "sin.wav")
        max-t 60.0]
    (time
     (loop [t 0.0]
       (when (< t max-t)
         (oversample4 s t 0 delta-t)
         (recur (+ t inc-t))))))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 367.715828 msecs"
: ;;=> nil

Woot!

* Experiments, round 3

** DONE A simple combination of operations, baseline

#+begin_src clojure
  (let [dur 60
        path (str  "test" dur ".wav")]
    (when-not (.exists (io/file path))
      (save (->stereo (sinusoid dur 440)) path 44100))
    (-> path
        read-sound
        ;;(sinusoid dur 440)
        ->stereo
        (fade-in 20)
        (fade-out 20)
        (mix (-> (square-wave 60 880)
                 (timeshift (/ dur 2))
                 (->stereo)))
        ;;(visualize)
        ;;(save (str "test-out" dur ".wav") 44100)
        oversample-all
        time
        ))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 9683.257536 msecs"
: ;;=> nil

Meh. OK at 6.1x realtime. Hope to do better.

** A simple combination of operations, baseline, without lein deoptimization

#+begin_src clojure
  (let [dur 60
        path (str  "test" dur ".wav")]
    (when-not (.exists (io/file path))
      (save (->stereo (sinusoid dur 440)) path 44100))
    (-> path
        read-sound
        ;;(sinusoid dur 440)
        ->stereo
        (fade-in 20)
        (fade-out 20)
        (mix (-> (square-wave 60 880)
                 (timeshift (/ dur 2))
                 (->stereo)))
        ;;(visualize)
        ;;(save (str "test-out" dur ".wav") 44100)
        oversample-all
        time
        ))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 8594.701357 msecs"
: ;;=> nil

Significantly better: 6.9x realtime. Still not great.

** A simple combination of operations, baseline, with inline metadata

#+begin_src clojure
  (let [dur 60
        path (str  "test" dur ".wav")]
    (when-not (.exists (io/file path))
      (save (->stereo (sinusoid dur 440)) path 44100))
    (-> path
        read-sound
        ;;(sinusoid dur 440)
        ->stereo
        (fade-in 20)
        (fade-out 20)
        (mix (-> (square-wave 60 880)
                 (timeshift (/ dur 2))
                 (->stereo)))
        ;;(visualize)
        ;;(save (str "test-out" dur ".wav") 44100)
        oversample-all
        time
        ))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 8605.301345 msecs"
: ;;=> nil

I'm pretty sure that the way I was using :inline metadata was totally wrong.

** With sample as a macro rather than a function

Previous results:
: ;; "Elapsed time: 8605.301345 msecs"


#+begin_src clojure
  (let [dur 60
        path (str  "test" dur ".wav")]
    (when-not (.exists (io/file path))
      (save (->stereo (sinusoid dur 440)) path 44100))
    (-> path
        read-sound
        ;;(sinusoid dur 440)
        ->stereo
        (fade-in 20)
        (fade-out 20)
        (mix (-> (square-wave 60 880)
                 (timeshift (/ dur 2))
                 (->stereo)))
        ;;(visualize)
        ;;(save (str "test-out" dur ".wav") 44100)
        oversample-all
        time
        ))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 5508.543365 msecs"
: ;;=> nil

Yep, quite a bit better again: 16x realtime. And at this point I'm pretty much out
of ideas for how to make it faster without changing the underlying
metaphor of functional composition. Maybe something to talk to other
people about.

* Symbolic composition

** Baseline

#+begin_src clojure
    (let [dur 60
          s1 (sinusoid dur 440)
          s2 (sinusoid dur 1234)]
      (-> s1
          (multiply s2)
          (multiply s2)
          (multiply s2)
          (multiply s2)
          (multiply s2)
          (multiply s2)
          (multiply s2)
          oversample-all
          time
    ))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 6160.466973 msecs"
: ;;=> nil


** Symbolically

#+begin_src clojure
  (let [dur 60
        s1 (sinusoid dur 440)
        s2 (sinusoid dur 1234)
        i1 (ops/input :s1)
        i2 (ops/input :s2)
        op (ops/compile
            (-> i1
                (ops/multiply i2)
                (ops/multiply i2)
                (ops/multiply i2)
                (ops/multiply i2)
                (ops/multiply i2)
                (ops/multiply i2)
                (ops/multiply i2)))]
    (-> (op {:s1 s1 :s2 s2})
        oversample-all
        time
  ))
#+end_src

#+RESULTS:
: ;; "Elapsed time: 4734.177664 msecs"
: ;;=> nil

That's not bad. Maybe 25% better.


